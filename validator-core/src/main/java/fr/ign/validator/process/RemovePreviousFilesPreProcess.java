package fr.ign.validator.process;

import java.io.File;
import java.util.Collection;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.Marker;
import org.apache.logging.log4j.MarkerManager;

import fr.ign.validator.Context;
import fr.ign.validator.ValidatorListener;
import fr.ign.validator.data.Document;
import fr.ign.validator.tools.FileUtils;
import fr.ign.validator.tools.MultiTableReader;
import fr.ign.validator.tools.TableReader;

/**
 * 
 * Remove temp files from previous run before running validator.
 * 
 * @author MBorne
 *
 */
public class RemovePreviousFilesPreProcess implements ValidatorListener {

    public static final Logger log = LogManager.getRootLogger();
    public static final Marker MARKER = MarkerManager.getMarker("RemovePreviousFilesPreProcess");

    /**
     * Run process on document directory.
     * 
     * @param documentPath
     */
    public void run(File documentPath) {
        log.info(MARKER, "Remove temp files from previous run ...");

        Collection<File> files = FileUtils.listFilesAndDirs(documentPath, null);
        for (File file : files) {
            if (isMultiTableReaderFile(file)) {
                log.info(MARKER, "Remove MultiTableReader directory {}...", file);
                org.apache.commons.io.FileUtils.deleteQuietly(file);
            } else if (isTableReaderFile(file)) {
                log.info(MARKER, "Remove TableReader file {}...", file);
                org.apache.commons.io.FileUtils.deleteQuietly(file);
            }
        }

        log.info(MARKER, "Remove temp files from previous run : completed.");
    }

    /**
     * Is generated by {@link MultiTableReader}?
     * 
     * @param file
     * @return
     */
    private boolean isMultiTableReaderFile(File file) {
        return file.isDirectory() && file.getName().endsWith(MultiTableReader.TMP_EXTENSION);
    }

    /**
     * Is generated by {@link TableReader}?
     * 
     * @param file
     * @return
     */
    private boolean isTableReaderFile(File file) {
        return (!file.isDirectory()) && file.getName().endsWith(TableReader.TMP_EXTENSION);
    }

    @Override
    public void beforeMatching(Context context, Document document) throws Exception {
        run(document.getDocumentPath());
    }

    @Override
    public void beforeValidate(Context context, Document document) throws Exception {
        // nothing to do
    }

    @Override
    public void afterValidate(Context context, Document document) throws Exception {
        // nothing to do
    }

}
