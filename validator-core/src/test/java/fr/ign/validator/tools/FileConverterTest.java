package fr.ign.validator.tools;

import static org.junit.Assert.assertThrows;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.junit.Assert;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import fr.ign.validator.exception.ValidatorFatalError;
import fr.ign.validator.tools.ogr.OgrVersion;

/**
 * Regress test for format conversions
 *
 * @author MBorne
 */
public class FileConverterTest {

    @Rule
    public TemporaryFolder folder = new TemporaryFolder();

    FileConverter fileConverter;

    @Before
    public void setUp() {
        fileConverter = FileConverter.getInstance();
    }

    @Test
    public void testGetVersion() {
        OgrVersion version = fileConverter.getVersion();
        System.out.println(version);
    }

    @Test
    public void testConvertShpLatin1ToCSV() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/shp_latin1/PRESCRIPTION_PCT.dbf");
        File target = folder.newFile("PRESCRIPTION_PCT.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.ISO_8859_1);
        Assert.assertTrue(target.exists());
        List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
        Assert.assertEquals(60, lines.size());
        Assert.assertEquals("WKT,LIBELLE,TXT,TYPEPSC,NOMFIC,URLFIC,INSEE,DATAPPRO,DATVALID", lines.get(0));
        Assert.assertEquals(
            "\"POINT (557311.155866353 6742836.60415676)\",Bâtiment agricole,,16,,,41269,2013/09/26,",
            lines.get(1)
        );
    }

    @Test
    public void testConvertShpLatin1ToCSVBadCharset() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/shp_latin1/PRESCRIPTION_PCT.dbf");
        File target = folder.newFile("PRESCRIPTION_PCT.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
        Assert.assertTrue(target.exists());
        /* as there is a mistake, output encoding is kept as latin1 */
        Assert.assertFalse(CharsetDetector.isValidUTF8(target));
        List<String> lines = FileUtils.readLines(target, StandardCharsets.ISO_8859_1);
        Assert.assertEquals(60, lines.size());
        Assert.assertEquals("WKT,LIBELLE,TXT,TYPEPSC,NOMFIC,URLFIC,INSEE,DATAPPRO,DATVALID", lines.get(0));
        Assert.assertEquals(
            "\"POINT (557311.155866353 6742836.60415676)\",Bâtiment agricole,,16,,,41269,2013/09/26,",
            lines.get(1)
        );
    }

    @Test
    public void testConvertShpUtf8ToCSV() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/shp_utf8/PRESCRIPTION_PCT.dbf");
        File target = folder.newFile("PRESCRIPTION_PCT.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
        Assert.assertTrue(target.exists());
        List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
        Assert.assertEquals(60, lines.size());
        Assert.assertEquals("WKT,LIBELLE,TXT,TYPEPSC,NOMFIC,URLFIC,INSEE,DATAPPRO,DATVALID", lines.get(0));
        Assert.assertEquals(
            "\"POINT (557311.155866353 6742836.60415676)\",Bâtiment agricole,,16,,,41269,2013/09/26,",
            lines.get(1)
        );
    }

    @Test
    public void testConvertShpUtf8ToCSVBadCharset() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/shp_utf8/PRESCRIPTION_PCT.dbf");
        File target = folder.newFile("PRESCRIPTION_PCT.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.ISO_8859_1);
        Assert.assertTrue(target.exists());
        /* as there is a mistake, double UTF-8 encoding */
        Assert.assertTrue(CharsetDetector.isValidUTF8(target));
        List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
        Assert.assertEquals(60, lines.size());
        Assert.assertEquals("WKT,LIBELLE,TXT,TYPEPSC,NOMFIC,URLFIC,INSEE,DATAPPRO,DATVALID", lines.get(0));
        // double UTF-8 encoded â -> Ã¢
        Assert.assertEquals(
            "\"POINT (557311.155866353 6742836.60415676)\",BÃ¢timent agricole,,16,,,41269,2013/09/26,",
            lines.get(1)
        );
    }

    @Test
    public void testConvertTabLatin1ToCSV() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/tab_latin1/PRESCRIPTION_PCT.TAB");
        File target = folder.newFile("PRESCRIPTION_PCT.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.ISO_8859_1);
        Assert.assertTrue(target.exists());
        List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
        Assert.assertEquals(60, lines.size());
        Assert.assertEquals("WKT,LIBELLE,TXT,TYPEPSC,NOMFIC,URLFIC,INSEE,DATAPPRO,DATVALID", lines.get(0));
        Assert.assertEquals(
            "\"POINT (557311.156 6742836.604)\",Bâtiment agricole,,16,,,41269,2013/09/26,",
            lines.get(1)
        );
    }

    @Test
    public void testConvertTabUtf8ToCSV() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/tab_utf8/PRESCRIPTION_PCT.tab");
        File target = folder.newFile("PRESCRIPTION_PCT.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
        Assert.assertTrue(target.exists());
        List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
        Assert.assertEquals(60, lines.size());
        Assert.assertEquals("WKT,LIBELLE,TXT,TYPEPSC,NOMFIC,URLFIC,INSEE,DATAPPRO,DATVALID", lines.get(0));
        Assert.assertEquals("\"POINT (557311.17 6742836.6)\",Bâtiment agricole,,16,,,41269,2013/09/26,", lines.get(1));
    }

    @Test
    public void testConvertGmlUtf8ToCSV() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/gml/PRESCRIPTION_LIN.gml");
        File target = folder.newFile("PRESCRIPTION_LIN.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
        Assert.assertTrue(target.exists());
        List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
        Assert.assertEquals(92, lines.size());
        Assert.assertEquals("WKT,gml_id,LIBELLE,TYPEPSC,TYPEPSC2,INSEE,DATAPPRO", lines.get(0));
        Assert.assertEquals(
            "\"MULTILINESTRING ((226546.544185517 6755336.26169925,226707.572437799 6755556.91246038,226751.823845957 6755621.52764606,226758.594781693 6755631.41445423,226780.994538211 6755664.12220385,226790.366741745 6755677.80733694))\",PRESCRIPTION_LIN.2666,Marge de recul,11,11001,56118,20140123",
            lines.get(1)
        );
    }

    @Test
    public void testConvertGmlInvalid() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/gml/INVALID.gml");
        File target = folder.newFile("INVALID.csv");
        assertThrows(ValidatorFatalError.class, () -> {
            fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
        });
        Assert.assertFalse(target.exists());
    }

    /**
     * Regress test about GDAL coordinate precision while converting to CSV
     *
     * @see validator-core/src/test/resources/data/POINT.README.md
     *
     * @throws IOException
     */
    @Test
    public void testCoordinatePrecision() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/POINT.shp");
        File target = folder.newFile("POINT.csv");

        String expectedTargetName = getExpectedPointName();
        Assume.assumeNotNull(expectedTargetName);
        File expectedTarget = ResourceHelper.getResourceFile(getClass(), expectedTargetName);
        List<String> expectedLines = FileUtils.readLines(expectedTarget, StandardCharsets.UTF_8);
        try {
            fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
            Assert.assertTrue(target.exists());
            List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
            Assert.assertEquals(11, lines.size());
            for (int i = 0; i < lines.size(); i++) {
                String expected = expectedLines.get(i);
                String actual = lines.get(i);
                Assert.assertEquals(expected, actual);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail();
        }
    }

    /**
     * Find expected CSV POINT file according to the GDAL current version
     *
     * @deprecated GDAL >= 2.3 is now required (POINT_EXPECTED_1.10.x.csv and
     *             POINT_EXPECTED_1.11.x.csv kept for trace)
     *
     * @return
     */
    private String getExpectedPointName() {
        return "/data/POINT_EXPECTED_2.2.x.csv";
    }

    /**
     * Test dbf to csv with backslash as last char
     */
    @Test
    public void testRegressBugBackslash01() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/bug-backslash/source.dbf");
        File target = folder.newFile("output.csv");
        try {
            fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
            Assert.assertTrue(target.exists());
            List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
            Assert.assertEquals(2, lines.size());
            Assert.assertEquals("URLFIC,INSEE", lines.get(0));
            Assert.assertEquals(
                "\\\\ALPICITE-NAS\\etudes\\ORNON\\ELABORATION DU PLU\\14.GPU\\GPU ORNON\\38285_PLU_20171018\\,38285",
                lines.get(1)
            );
        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail();
        }
    }

    /**
     * Test csv to dbf to csv with backslash as last char
     */
    @Test
    public void testRegressBugBackslash02() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/data/bug-backslash/source.csv");
        File targetDbf = folder.newFile("output.dbf");
        File targetCsv = folder.newFile("output.csv");
        try {
            /* csv -> dbf */
            fileConverter.convertToCSV(source, targetDbf, StandardCharsets.UTF_8);
            Assert.assertTrue(targetDbf.exists());
            /* dbf -> csv */
            fileConverter.convertToCSV(targetDbf, targetCsv, StandardCharsets.UTF_8);
            Assert.assertTrue(targetCsv.exists());
            List<String> lines = FileUtils.readLines(targetCsv, StandardCharsets.UTF_8);
            Assert.assertEquals(2, lines.size());
            Assert.assertEquals("URLFIC,INSEE", lines.get(0));
            Assert.assertEquals(
                "\\\\ALPICITE-NAS\\etudes\\ORNON\\ELABORATION DU PLU\\14.GPU\\GPU ORNON\\38285_PLU_20171018\\,38285",
                lines.get(1)
            );
        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail();
        }
    }

    @Test
    public void testConvertGeoJSONToCSV() throws IOException {
        File source = ResourceHelper.getResourceFile(getClass(), "/geojson/communes.json");
        File target = folder.newFile("COMMUNES.csv");
        fileConverter.convertToCSV(source, target, StandardCharsets.UTF_8);
        Assert.assertTrue(target.exists());
        List<String> lines = FileUtils.readLines(target, StandardCharsets.UTF_8);
        Assert.assertEquals(3, lines.size());
        Assert.assertEquals("WKT,id,nom_com,code_dep,code_insee,bbox", lines.get(0));
        Assert.assertEquals(
            "\"MULTIPOLYGON (((2.72836055 50.38732706,2.72830481 50.3873247,2.72805744 50.38728977,2.72783635 50.38725274,2.72758267 50.38718988,2.72729168 50.38711921,2.72710406 50.3870714,2.72686768 50.38700426,2.72658614 50.38692886,2.72630204 50.38685775,2.72614965 50.3868382,2.7256669 50.38689019,2.72561127 50.38689446,2.72529466 50.38683747,2.72475363 50.38673419,2.7245905 50.38670241,2.72440529 50.38667829,2.72430465 50.38664467,2.72418062 50.38657491,2.72403043 50.38646254,2.72378935 50.38628029,2.72371128 50.38622984,2.7236308 50.38618271,2.72340681 50.38605814,2.72308214 50.38588531,2.72297016 50.38582141,2.72278698 50.3857332,2.72253127 50.38560927,2.72248628 50.38559427,2.72229252 50.38551636,2.72177056 50.38531983,2.72137806 50.38517603,2.7208861 50.3850161,2.72064349 50.38491133,2.72038503 50.3848022,2.72012756 50.38469362,2.71987671 50.38460588,2.719675 50.38454527,2.71943104 50.38450549,2.71910079 50.38445662,2.71880264 50.38441662,2.71853296 50.38438386,2.71842955 50.38436944,2.7178019 50.38429888,2.71744716 50.38426054,2.71713151 50.38423666,2.71697318 50.38422777,2.71688998 50.38416617,2.71678984 50.38412016,2.71657704 50.38408546,2.71628741 50.38405356,2.71594873 50.38403258,2.71567397 50.3840025,2.71541925 50.38395739,2.71517521 50.38390924,2.71487485 50.38383933,2.71474993 50.38380663,2.71459042 50.38375788,2.71450607 50.38372644,2.71438546 50.38367696,2.71426894 50.38362382,2.71415666 50.38356691,2.71404888 50.38350651,2.71382554 50.38337483,2.71365918 50.38324723,2.71358928 50.38326862,2.71349912 50.38329624,2.71344947 50.38331138,2.71343215 50.38331978,2.71341005 50.38333042,2.71336499 50.38335302,2.71328417 50.38339359,2.71325375 50.38340888,2.71319995 50.38343802,2.71310207 50.38349094,2.71309784 50.38349335,2.71295514 50.38357633,2.71292906 50.38359324,2.71276009 50.38370336,2.71273021 50.38372286,2.71247671 50.38385756,2.71241666 50.38387385,2.71224355 50.38392085,2.7122278 50.38392611,2.71199273 50.38400438,2.71182589 50.38405992,2.71180311 50.38406535,2.71173913 50.38408145,2.71156084 50.38412619,2.71144636 50.38415734,2.71132135 50.38419143,2.71114638 50.38424274,2.71108464 50.38426082,2.71107905 50.38425596,2.7110648 50.3842438,2.71097478 50.38427106,2.71087347 50.38433259,2.71082895 50.38435969,2.71069246 50.38443496,2.71062537 50.38445464,2.71039063 50.3845234,2.71041979 50.38463057,2.71042185 50.38463812,2.71030474 50.38461522,2.71026743 50.38460795,2.70988189 50.38452948,2.70949849 50.3844467,2.70944424 50.38443131,2.70909941 50.3843304,2.70875742 50.38422528,2.70876897 50.38429219,2.70877847 50.38434814,2.70874265 50.3843994,2.70867696 50.38449351,2.7086346 50.38448641,2.70835247 50.384494,2.70816708 50.38450156,2.70798055 50.3845127,2.70772034 50.38454252,2.70740668 50.38458783,2.7072224 50.38462339,2.70690342 50.38466617,2.70686457 50.3851172,2.70659618 50.38510481,2.70653168 50.38508858,2.70606156 50.38497255,2.70588115 50.38492149,2.70570592 50.38487197,2.705229 50.38471794,2.70514125 50.38469223,2.70457114 50.38453296,2.70447315 50.38450579,2.70418747 50.38439944,2.70410992 50.38435904,2.70403311 50.38431342,2.70396976 50.38427009,2.7039615 50.38426442,2.70395667 50.38420345,2.70399512 50.38406358,2.70403974 50.38390047,2.70404373 50.38377058,2.70398199 50.38373973,2.70390961 50.38370355,2.70390807 50.38370283,2.70382121 50.38367039,2.70381883 50.38366949,2.70367867 50.38362777,2.70357172 50.38359591,2.70340409 50.38354595,2.70339694 50.38354387,2.70303362 50.3834622,2.70302795 50.3834726,2.70293468 50.383646,2.70292999 50.38365452,2.70279963 50.38390504,2.70278315 50.38393714,2.70258972 50.3843087,2.70235965 50.38475074,2.69940739 50.3841815,2.69908806 50.38411842,2.6990465 50.3841185,2.69916607 50.38375026,2.69921205 50.38362218,2.69916859 50.38361058,2.69688505 50.38355589,2.69661685 50.38376899,2.69652275 50.38384327,2.69639212 50.38394466,2.69629336 50.3840245,2.69627191 50.38404186,2.69594475 50.38429916,2.69585644 50.3843687,2.69555127 50.38461016,2.69550782 50.38464489,2.69529549 50.38481296,2.69506636 50.38499545,2.69472985 50.38526323,2.69470319 50.38528444,2.69466467 50.38531469,2.69449086 50.38545125,2.69441468 50.3855105,2.69424114 50.38564715,2.69324545 50.38539538,2.69320093 50.38546619,2.69309728 50.38563202,2.69237665 50.38678886,2.69039438 50.38628709,2.6892093 50.38598696,2.68869181 50.38681725,2.68864059 50.38690177,2.68864053 50.38695824,2.68905074 50.38719952,2.68920545 50.38727361,2.68930478 50.38731094,2.68980427 50.38748959,2.68966368 50.38751724,2.68846087 50.38774296,2.68757662 50.38790574,2.68691436 50.38802526,2.68608932 50.38817282,2.68599367 50.38824394,2.68515956 50.38887644,2.68503681 50.38896931,2.68464276 50.38926582,2.6846176 50.38924691,2.68461732 50.38924673,2.68362209 50.38815647,2.68362167 50.38815664,2.68292552 50.38841593,2.68282362 50.38845391,2.68273424 50.38848716,2.68267724 50.38850838,2.68244641 50.38859433,2.68235829 50.38862813,2.68224034 50.38867218,2.68187748 50.3888068,2.68110319 50.3890955,2.6804232 50.38934933,2.68030694 50.38939266,2.68005358 50.38948725,2.67972632 50.38960886,2.67916132 50.38981944,2.67852916 50.39005624,2.67842823 50.39009368,2.67820119 50.39017802,2.67798892 50.39025745,2.67728314 50.39052099,2.6771452 50.39057072,2.67706737 50.39059889,2.67704149 50.39051685,2.67696254 50.39041179,2.67692522 50.3903633,2.67665302 50.38999882,2.67659804 50.38992129,2.67636857 50.38964006,2.67632213 50.38958885,2.67632032 50.38958687,2.67595643 50.38917861,2.67595504 50.38917708,2.67587898 50.38910443,2.67564813 50.38888406,2.6756794 50.38886915,2.67571011 50.3888545,2.67589127 50.38876422,2.67606824 50.38867042,2.67606601 50.38866844,2.67558899 50.38825449,2.67541188 50.38810751,2.67539804 50.38809742,2.67534939 50.38812988,2.67529037 50.38818018,2.67516305 50.3882821,2.67504965 50.38838244,2.67496709 50.3884465,2.67485601 50.38851345,2.67480096 50.38855693,2.67438981 50.38884017,2.67419067 50.3889735,2.67406523 50.38904508,2.67379757 50.38917706,2.67373404 50.38920831,2.67366596 50.38924781,2.67363946 50.38926318,2.67324714 50.38936817,2.67268506 50.389514,2.67267367 50.38951693,2.67257195 50.38956873,2.67252649 50.38964959,2.67242619 50.38982807,2.67230887 50.39001045,2.67216103 50.39028692,2.67213318 50.39040328,2.67211732 50.39050936,2.67204554 50.39077203,2.67198147 50.39088542,2.67183267 50.39100721,2.67166704 50.39110328,2.67154178 50.39116731,2.67132652 50.39127249,2.67103674 50.39139256,2.67080005 50.39148871,2.67070762 50.39153604,2.67049025 50.39166249,2.67031557 50.39178897,2.67008586 50.39201961,2.67001748 50.39208344,2.66955841 50.39229704,2.66946839 50.39234124,2.66934534 50.39238858,2.66875804 50.39258254,2.66835772 50.39270194,2.66814914 50.3927723,2.66783413 50.39285961,2.66768945 50.39288741,2.6676403 50.3930144,2.66727223 50.39378089,2.66722753 50.3938508,2.66706681 50.39396653,2.66685639 50.39407935,2.66648962 50.39424202,2.66652569 50.3942668,2.66832052 50.39535001,2.66832864 50.39535487,2.66829961 50.39536943,2.66818618 50.39542631,2.6674683 50.3958228,2.66751935 50.39587653,2.66801913 50.39639668,2.66824582 50.39663061,2.66852217 50.3969154,2.66869972 50.39710287,2.66883463 50.39724059,2.66906769 50.39718906,2.66911502 50.39720974,2.66916322 50.39729192,2.67077081 50.4001267,2.67088233 50.40008444,2.67088317 50.40008498,2.67121842 50.40032279,2.67121968 50.4003236,2.67151944 50.40055763,2.67222027 50.4011045,2.67227672 50.40108445,2.6723664 50.40105264,2.67250873 50.40100212,2.67254983 50.40098759,2.67265823 50.4009491,2.67322994 50.40074629,2.67366458 50.4013658,2.67368576 50.40139198,2.67335888 50.40141939,2.6731466 50.40144765,2.67287772 50.40156364,2.67264739 50.40171179,2.67238002 50.40185292,2.67215416 50.40193994,2.67195253 50.40199435,2.6715583 50.40205318,2.67115548 50.40222357,2.67090937 50.40229186,2.67068313 50.4023497,2.67061641 50.40254352,2.67061012 50.40264594,2.67026811 50.4027524,2.66992459 50.40285283,2.66989899 50.40285761,2.66941727 50.40289134,2.66857774 50.40293164,2.66849337 50.40292522,2.66797095 50.40280406,2.66791529 50.40278721,2.66709058 50.40247806,2.66697316 50.40251886,2.66596447 50.40288609,2.66544452 50.40319853,2.66484135 50.40356191,2.66450806 50.40374765,2.66422986 50.40388595,2.6642159 50.40389489,2.66406338 50.40401791,2.66383531 50.40420079,2.66398582 50.40421026,2.6639943 50.40422429,2.66399805 50.40423023,2.6640197 50.40427023,2.66407312 50.40436904,2.66423057 50.40466653,2.6642508 50.40470842,2.66435181 50.40491741,2.66437965 50.40495582,2.6645889 50.40517364,2.66473873 50.40532971,2.66483933 50.40545181,2.6648062 50.40547057,2.66479929 50.40547495,2.66479237 50.40547933,2.66451476 50.40565552,2.6642471 50.40583506,2.66414554 50.40591872,2.66409765 50.40595997,2.66404269 50.40600749,2.66404 50.40601045,2.6639838 50.40607592,2.66393082 50.40614212,2.66391423 50.40616479,2.66388135 50.40620904,2.66375801 50.40637892,2.66374752 50.40639334,2.66371363 50.40643993,2.66359954 50.4065706,2.66353316 50.40664619,2.6634753 50.40670761,2.66340952 50.40675439,2.66321998 50.40686716,2.66317555 50.40689388,2.66314452 50.40691247,2.66311547 50.40692999,2.66211859 50.40734076,2.66209816 50.40734923,2.66210067 50.40735211,2.66221192 50.40747962,2.66226513 50.40750428,2.66231193 50.40754283,2.66255816 50.40781964,2.66256777 50.40783197,2.66266566 50.40798314,2.66267162 50.40799465,2.66273709 50.40816064,2.66275179 50.4082737,2.66276065 50.40837696,2.66272698 50.40851853,2.66272625 50.40852185,2.66263674 50.40907236,2.66241033 50.40921323,2.6624113 50.4092152,2.66241381 50.40921755,2.66266423 50.4094564,2.66434617 50.41106602,2.66444529 50.41116064,2.66452932 50.41124139,2.66476873 50.41147096,2.66490539 50.41160213,2.66505573 50.41174788,2.66518683 50.41187023,2.66519577 50.41187869,2.66536161 50.41203777,2.66609507 50.41274141,2.66645065 50.41308081,2.66685091 50.41346351,2.66751864 50.41333972,2.66827093 50.4131964,2.66987405 50.41289655,2.67002555 50.41286805,2.67134328 50.41261768,2.67138549 50.41260864,2.6715018 50.41280564,2.67167958 50.41311906,2.67186173 50.41343195,2.67213011 50.41390172,2.67220551 50.41403819,2.67228848 50.41417756,2.67234771 50.41425133,2.67239881 50.41429949,2.67244591 50.41433732,2.67254255 50.41440571,2.67269893 50.41431698,2.67279694 50.41426131,2.67296051 50.41416847,2.67308756 50.41409637,2.67322463 50.41401863,2.67337155 50.41393705,2.67341864 50.41391087,2.67350777 50.4138585,2.67360663 50.4138005,2.67376715 50.41370101,2.67378986 50.41368689,2.67382415 50.41366453,2.6739294 50.41359578,2.67395143 50.41357842,2.67428864 50.41331224,2.674642 50.41302572,2.67466248 50.41300881,2.67497862 50.4127616,2.67499063 50.41275211,2.67510401 50.41266345,2.67529576 50.4125573,2.67534736 50.41252871,2.67584943 50.41225075,2.67528782 50.41169448,2.67525404 50.41166091,2.67486262 50.41127323,2.67428936 50.41017569,2.67431578 50.41015242,2.67492948 50.4099007,2.67505518 50.4098837,2.67523654 50.40981775,2.67532097 50.40977443,2.67540723 50.4097295,2.67549068 50.40968546,2.67557371 50.40964115,2.67571452 50.40956764,2.67592497 50.40945723,2.67624185 50.40928866,2.67626793 50.40927473,2.67634869 50.40923239,2.67647019 50.40916915,2.67719923 50.40878198,2.67725772 50.40875134,2.67731496 50.40871962,2.67737686 50.40868351,2.67758627 50.4085573,2.67792795 50.40835297,2.67822408 50.40817662,2.67829529 50.40813372,2.6783414 50.4081061,2.67850951 50.4080033,2.67872358 50.40787297,2.67878888 50.40783265,2.67891705 50.40775712,2.67894031 50.40774372,2.67908384 50.40766168,2.67932635 50.40752083,2.67943344 50.40746904,2.67969958 50.40734521,2.67981354 50.40729613,2.6803508 50.40728137,2.68046798 50.40727817,2.68051673 50.40727596,2.68073875 50.40726603,2.68141617 50.40723384,2.6814658 50.40722733,2.68169125 50.40718383,2.68208971 50.40710514,2.6821942 50.40708683,2.6822482 50.40707736,2.68226479 50.40707489,2.68259252 50.40702887,2.68290211 50.40698594,2.68321184 50.40694338,2.68332446 50.40692742,2.68365796 50.40687953,2.68373871 50.40686088,2.68378558 50.40684592,2.68379544 50.40684271,2.68443014 50.40663256,2.68470916 50.40653578,2.68522073 50.4063605,2.68525226 50.40634972,2.68527366 50.40634241,2.68548453 50.40627014,2.68549979 50.40627898,2.68564661 50.40636419,2.68565515 50.40636888,2.6858686 50.40649367,2.6860297 50.40658735,2.68608317 50.40661774,2.68642688 50.40682428,2.68676591 50.40694894,2.68699993 50.40704092,2.68706137 50.4070777,2.68732021 50.40731347,2.68801776 50.40795648,2.68806936 50.40817557,2.6882055 50.40835492,2.68830649 50.40851533,2.68841742 50.40881976,2.68848231 50.40900261,2.68848342 50.40902783,2.6885357 50.40902509,2.6885572 50.40902398,2.68856072 50.40902192,2.68859738 50.40900047,2.68862705 50.40894983,2.68866966 50.40887399,2.68867275 50.40885128,2.68867695 50.40883154,2.68867825 50.40882571,2.68865966 50.40867395,2.68874108 50.40854677,2.68891349 50.40847008,2.68892409 50.40846086,2.68909504 50.4083024,2.6892417 50.40816541,2.68924892 50.4081561,2.68934218 50.40799824,2.68959058 50.4075579,2.68996445 50.40743271,2.69006373 50.40739247,2.69030034 50.40729369,2.69048722 50.40721632,2.69068101 50.40713512,2.69072157 50.40711816,2.69122618 50.40690675,2.69262511 50.40679686,2.69274486 50.40678692,2.69308706 50.40676219,2.69319816 50.40676363,2.69343378 50.4067793,2.69385268 50.40679981,2.69400603 50.40680738,2.69406291 50.40681021,2.69411148 50.40681554,2.69460383 50.40665427,2.69461086 50.40665249,2.6946964 50.40663124,2.6950834 50.40653803,2.69511633 50.40655104,2.69512716 50.406549,2.69513166 50.40654811,2.6952159 50.40653234,2.69607627 50.40637062,2.69611213 50.40636398,2.69616641 50.40635514,2.69674276 50.40626202,2.69685108 50.40623643,2.69697976 50.40621125,2.69710047 50.40618067,2.69746905 50.40608946,2.69783943 50.40600087,2.69785434 50.4059974,2.69805056 50.40595407,2.69821051 50.40591389,2.69832702 50.40588122,2.69873058 50.40576523,2.69913261 50.40564664,2.69922613 50.40562711,2.69957306 50.40556242,2.70067898 50.40539535,2.70116095 50.40522505,2.70137448 50.40514962,2.70140742 50.40513803,2.70143743 50.40517024,2.70165587 50.40540597,2.70175266 50.40549993,2.70188892 50.40566562,2.70190708 50.40570552,2.70192578 50.40575153,2.70194233 50.40580319,2.70195438 50.40585546,2.7019635 50.40590423,2.70202671 50.40600044,2.70217745 50.40613986,2.70237309 50.40631378,2.7024941 50.40642135,2.70291022 50.40634281,2.70329091 50.4062684,2.70345067 50.40623638,2.70407166 50.406098,2.70421923 50.40603767,2.70425926 50.40601299,2.7043085 50.40597711,2.70435213 50.40593834,2.70451644 50.40577687,2.70466282 50.40570415,2.7048793 50.40562791,2.70490069 50.40562239,2.70511113 50.40557065,2.70532422 50.40552322,2.70533337 50.40554299,2.70548984 50.40588244,2.70552303 50.40587641,2.70563932 50.40585532,2.70575322 50.40583468,2.70630967 50.40572944,2.70715821 50.40556645,2.70743763 50.4055128,2.7077674 50.40544805,2.70855787 50.40529272,2.70856322 50.40529166,2.70856336 50.40529157,2.70862091 50.40520076,2.70868817 50.40518144,2.70869338 50.40517921,2.70872225 50.40519023,2.70888357 50.4052521,2.70889034 50.40524871,2.70922197 50.40517803,2.70933902 50.40514581,2.70969885 50.40500724,2.71006135 50.40486858,2.71028172 50.4047506,2.71047039 50.40464798,2.71054817 50.40460552,2.71060228 50.40457602,2.71086197 50.40450769,2.71101938 50.40446819,2.71116836 50.40442949,2.71156841 50.40432898,2.71197097 50.40423288,2.71243065 50.4041949,2.71289541 50.40415199,2.71323302 50.40409011,2.71360472 50.40396116,2.71429038 50.40370429,2.71519448 50.40351525,2.71570829 50.40339129,2.71596373 50.40332778,2.71597062 50.40332609,2.71710633 50.40328884,2.71713891 50.40329053,2.71762884 50.40331544,2.71823589 50.40334627,2.71828479 50.40339379,2.71865392 50.40347022,2.71949825 50.40364504,2.71999536 50.40374393,2.72047914 50.40384108,2.72079076 50.4038803,2.72080772 50.40388671,2.72081585 50.4038896,2.72107717 50.40390357,2.72122379 50.40390964,2.72134196 50.40390237,2.72225063 50.40384965,2.72315955 50.40380142,2.72329191 50.40376859,2.72340675 50.40372836,2.72345057 50.40370287,2.72351834 50.40366613,2.72352313 50.40366372,2.72434361 50.40324613,2.72450573 50.40316363,2.72544089 50.40267896,2.72556243 50.40261909,2.72559666 50.40260219,2.72559919 50.40260148,2.72562465 50.402594,2.72563197 50.40259177,2.72572846 50.40251559,2.725933 50.40235427,2.72593357 50.40235373,2.72615813 50.4021789,2.72617421 50.40216682,2.72587751 50.40199523,2.72581864 50.40194681,2.72539825 50.40158471,2.72542243 50.40157965,2.72564489 50.40153355,2.72652681 50.40135336,2.72663307 50.40131481,2.72680687 50.40125173,2.72722316 50.40110057,2.72753471 50.40096642,2.72797001 50.40064868,2.72836014 50.40031998,2.72837186 50.40030807,2.7283761 50.40030386,2.72838007 50.40029731,2.72844695 50.40018848,2.72844723 50.40018794,2.72845276 50.40017861,2.72845545 50.40017413,2.72847912 50.40013432,2.72870108 50.39976028,2.72879729 50.39926386,2.72878797 50.39924795,2.72855869 50.39907634,2.72834453 50.39891553,2.72814393 50.39876508,2.7276324 50.39842928,2.72756494 50.39838505,2.72741034 50.39827528,2.72688273 50.39790101,2.7268655 50.39789244,2.72620648 50.39748664,2.72617918 50.3974698,2.7261934 50.3974648,2.72666604 50.39730093,2.72666553 50.39726547,2.72675888 50.3958214,2.72677728 50.39553497,2.72677958 50.39550041,2.72679092 50.39532448,2.72679289 50.39529773,2.7267938 50.39528552,2.72680967 50.39528583,2.72687553 50.39528741,2.72689013 50.39528771,2.72691905 50.39510823,2.72693366 50.39502926,2.72699712 50.39472192,2.72702471 50.39457915,2.727896 50.3948372,2.72829716 50.39495605,2.72863003 50.39505589,2.72956665 50.39533696,2.72984918 50.39542233,2.7298583 50.39542513,2.72987918 50.3954329,2.7299071 50.39541213,2.72988889 50.39540338,2.73038424 50.39511189,2.73104965 50.39471438,2.73153711 50.39442431,2.73167927 50.39433727,2.73173333 50.3943127,2.7320562 50.39452428,2.73239081 50.39474558,2.73269865 50.39493243,2.73295645 50.39507403,2.73314283 50.39490996,2.73340635 50.39468682,2.73375821 50.39438315,2.73387812 50.39428134,2.73390097 50.39407553,2.73390118 50.39400892,2.73389651 50.39353508,2.73389921 50.39315795,2.73393264 50.3931564,2.73395054 50.39271745,2.73394513 50.39243806,2.7339275 50.39109347,2.73392428 50.39095862,2.73392322 50.39089389,2.73392294 50.3908666,2.73392227 50.3907805,2.73402387 50.39074113,2.73402445 50.39070962,2.73402522 50.39067093,2.73402602 50.3906247,2.73402693 50.39058628,2.73402792 50.39053116,2.73402866 50.39049705,2.73392173 50.39035084,2.73348144 50.3897493,2.73350672 50.38974864,2.73368971 50.38974373,2.73367439 50.38972108,2.7331576 50.3889558,2.73315298 50.38895283,2.73302997 50.38887329,2.73270195 50.38871278,2.73239817 50.3885631,2.73209899 50.38841926,2.73183149 50.38828635,2.73155767 50.38815585,2.73128176 50.38802095,2.73095823 50.38786242,2.73063357 50.38770766,2.73041004 50.38759926,2.73010339 50.38746312,2.72988757 50.38738428,2.72977483 50.38735413,2.7296067 50.38731023,2.72943585 50.38727771,2.72929087 50.38726492,2.72924725 50.38725584,2.72909546 50.38725515,2.72908113 50.3872562,2.72892352 50.38726833,2.7286568 50.38728058,2.72843067 50.38729113,2.7284103 50.38729234,2.72836055 50.38732706)))\",commune.1,Ablain-Saint-Nazaire,62,62001,\"[ 2.6620981600000002, 50.383247230000002, 2.7340286599999999, 50.414405709999997 ]\"",
            lines.get(1)
        );
    }

}
